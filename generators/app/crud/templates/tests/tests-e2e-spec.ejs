import { HttpStatus, INestApplication } from '@nestjs/common';
import * as request from 'supertest';

import { loadFixtures } from '@data/util/fixture-loader';

import { setupApp } from '@config/app.config';
import { datasourceOptions } from '@config/orm.config';

import { testModuleBootstrapper } from '@test/test.module.bootstrapper';
import { createAccessToken } from '@test/test.util';

import { Create<%= pascalCase(name) %>Dto } from '@/module/<%= name %>/application/dto/create-<%= name %>.dto';
import { <%= pascalCase(name)%>ResponseDto } from '@/module/<%= name %>/application/dto/<%= name %>-response.dto';
import { Update<%= pascalCase(name) %>Dto } from '@/module/<%= name %>/application/dto/update-<%= name %>.dto';
import { <%= constantCase(name) %>_ENTITY_NAME } from '@/module/<%= name %>/domain/<%= name %>.name';

describe('<%= pascalCase(name) %> Module', () => {
  let app: INestApplication;

  const adminToken = createAccessToken({
    sub: '00000000-0000-0000-0000-00000000000X',
  });

  beforeAll(async () => {
    await loadFixtures(`${__dirname}/fixture`, datasourceOptions);
    const moduleRef = await testModuleBootstrapper();
    app = moduleRef.createNestApplication({ logger: false });
    setupApp(app);
    await app.init();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  afterAll(async () => {
    await app.close();
  });

  describe('GET - /<%= name %>', () => {
    it('should return paginated <%= kebabCase(name) %>s', async () => {
      await request(app.getHttpServer())
        .get('/api/v1/<%= name %>')
        .auth(adminToken, { type: 'bearer' })
        .expect(HttpStatus.OK)
        .then(({ body }) => {
          const expectedResponse = expect.objectContaining({
            data: expect.arrayContaining([
              expect.objectContaining({
                attributes: expect.objectContaining({
                  name: expect.any(String),
                  createdAt: expect.any(String),
                  updatedAt: expect.any(String),
                  deletedAt: null,
                }),
                id: expect.any(String),
                type: <%= constantCase(name) %>_ENTITY_NAME,
              }),
            ]),
            links: expect.any(Object),
            meta: expect.objectContaining({
              pageNumber: expect.any(Number),
              pageSize: expect.any(Number),
              pageCount: expect.any(Number),
              itemCount: expect.any(Number),
            }),
          });
          expect(body).toEqual(expectedResponse);
        });
    });
    it('should allow to select specific attributes', async () => {
      const attributes = ['name'] as (keyof <%= pascalCase(name) %>ResponseDto)[];

      await request(app.getHttpServer())
        .get(`/api/v1/<%= name %>?fields[target]=${attributes.join(',')}`)
        .auth(adminToken, { type: 'bearer' })
        .expect(HttpStatus.OK)
        .then(({ body }) => {
          const resourceAttributes = body.data[0].attributes;
          expect(Object.keys(resourceAttributes).length).toBe(
            attributes.length,
          );
          expect(resourceAttributes).toEqual({
            name: expect.any(String),
          });
        });
    });
    it('should allow to filter by attributes', async () => {
      const name = 'John';

      await request(app.getHttpServer())
        .get(`/api/v1/<%= name %>?filter[name]=${name}`)
        .auth(adminToken, { type: 'bearer' })
        .expect(HttpStatus.OK)
        .then(({ body }) => {
          const expectedResponse = expect.objectContaining({
            data: expect.arrayContaining([
              expect.objectContaining({
                attributes: expect.objectContaining({
                  name,
                }),
              }),
            ]),
          });
          expect(body).toEqual(expectedResponse);
        });
    });
  });
  
  describe('GET - /<%= kebabCase(name) %>/:id', () => {
    it('should return a specific <%= camelCase(name) %>', async () => {
      const <%= camelCase(name) %>Id = 1;

      await request(app.getHttpServer())
        .get(`/api/v1/<%= kebabCase(name) %>/${<%= camelCase(name) %>Id}`)
        .auth(adminToken, { type: 'bearer' })
        .expect(HttpStatus.OK)
        .then(({ body }) => {
          const expectedResponse = expect.objectContaining({
            data: expect.objectContaining({
              id: <%= camelCase(name) %>Id.toString(),
            }),
          });
          expect(body).toEqual(expectedResponse);
        });
    });

    it('should throw an error if <%= camelCase(name) %> is not found', async () => {
      await request(app.getHttpServer())
        .get('/api/v1/<%= kebabCase(name) %>/9999')
        .auth(adminToken, { type: 'bearer' })
        .expect(HttpStatus.NOT_FOUND)
        .then(({ body }) => {
          expect(body.error.detail).toBe('<%= pascalCase(name) %> with ID 9999 not found');
        });
    });
  });

  describe('POST - /<%= name %>', () => {
    it('should create a new <%= camelCase(name) %>', async () => {
      const create<%= pascalCase(name) %>Dto = { name: 'Mary' } as Create<%= pascalCase(name) %>Dto;

      await request(app.getHttpServer())
        .post('/api/v1/<%= kebabCase(name) %>/')
        .auth(adminToken, { type: 'bearer' })
        .send(create<%= pascalCase(name) %>Dto)
        .expect(HttpStatus.CREATED)
        .then(({ body }) => {
          const expectedResponse = expect.objectContaining({
            data: expect.objectContaining({
              attributes: expect.objectContaining({
                name: create<%= pascalCase(name) %>Dto.name,
              }),
            }),
          });
          expect(body).toEqual(expectedResponse);
        });
    });
  });

  describe('PATCH - /<%= name %>/:id', () => {
    it('should update an existing <%= name %>', async () => {
      const create<%= pascalCase(name) %>Dto = { name: 'Mary' } as Create<%= pascalCase(name) %>Dto;
      const update<%= pascalCase(name) %>Dto = { name: 'Jane' } as Update<%= pascalCase(name) %>Dto;
      let <%= camelCase(name) %>Id: number;

      await request(app.getHttpServer())
        .post('/api/v1/<%= kebabCase(name) %>')
        .auth(adminToken, { type: 'bearer' })
        .send(create<%= pascalCase(name) %>Dto)
        .expect(HttpStatus.CREATED)
        .then(({ body }) => {
          const expectedResponse = expect.objectContaining({
            data: expect.objectContaining({
              id: expect.any(String),
              attributes: expect.objectContaining({
                name: create<%= pascalCase(name) %>Dto.name,
              }),
            }),
          });
          expect(body).toEqual(expectedResponse);
          <%= camelCase(name) %>Id = body.data.id;
        });

      await request(app.getHttpServer())
        .patch(`/api/v1/<%= kebabCase(name) %>/${<%= camelCase(name) %>Id}`)
        .auth(adminToken, { type: 'bearer' })
        .send(update<%= pascalCase(name) %>Dto)
        .expect(HttpStatus.OK)
        .then(({ body }) => {
          const expectedResponse = expect.objectContaining({
            data: expect.objectContaining({
              id: <%= camelCase(name) %>Id.toString(),
              attributes: expect.objectContaining({
                name: update<%= pascalCase(name) %>Dto.name,
              }),
            }),
          });
          expect(body).toEqual(expectedResponse);
        });
    });

    it('should throw an error if <%= name %> is not found', async () => {
      await request(app.getHttpServer())
        .patch('/api/v1/<%= kebabCase(name) %>/9999')
        .send({ name: 'non-existing-<%= camelCase(name) %>' } as Update<%= pascalCase(name) %>Dto)
        .auth(adminToken, { type: 'bearer' })
        .expect(HttpStatus.NOT_FOUND)
        .then(({ body }) => {
          expect(body.error.detail).toBe('<%= pascalCase(name) %> with ID 9999 not found');
        });
    });
  });

  describe('DELETE - /<%= name %>/:id', () => {
    it('should delete a <%= name %>', async () => {
      const create<%= pascalCase(name) %>Dto = { name: 'Mary' } as Create<%= pascalCase(name) %>Dto;
      let <%= camelCase(name) %>Id: number;

      await request(app.getHttpServer())
        .post('/api/v1/<%= kebabCase(name) %>')
        .auth(adminToken, { type: 'bearer' })
        .send(create<%= pascalCase(name) %>Dto)
        .expect(HttpStatus.CREATED)
        .then(({ body }) => {
          const expectedResponse = expect.objectContaining({
            data: expect.objectContaining({
              id: expect.any(String),
              attributes: expect.objectContaining({
                name: create<%= pascalCase(name) %>Dto.name,
              }),
            }),
          });
          expect(body).toEqual(expectedResponse);
          <%= camelCase(name) %>Id = body.data.id;
        });

      await request(app.getHttpServer())
        .delete(`/api/v1/<%= kebabCase(name) %>/${<%= camelCase(name) %>Id}`)
        .auth(adminToken, { type: 'bearer' })
        .expect(HttpStatus.OK);

      await request(app.getHttpServer())
        .get(`/api/v1/<%= kebabCase(name) %>/${<%= camelCase(name) %>Id}`)
        .auth(adminToken, { type: 'bearer' })
        .expect(HttpStatus.NOT_FOUND);
    });
  });
});
